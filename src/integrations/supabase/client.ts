// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Check if environment variables are set
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error(
    `Supabase environment variables are missing!\n` +
    `VITE_SUPABASE_URL: ${SUPABASE_URL ? 'Set' : 'Missing'}\n` +
    `VITE_SUPABASE_PUBLISHABLE_KEY: ${SUPABASE_PUBLISHABLE_KEY ? 'Set' : 'Missing'}\n` +
    `Please set these environment variables in your .env file (for local development) and in your Vercel project settings (for production).`
  );
}

// Enhanced logging for debugging
console.log('Supabase Configuration Debug:', {
  mode: import.meta.env.MODE,
  dev: import.meta.env.DEV,
  prod: import.meta.env.PROD,
  hasEnvUrl: !!SUPABASE_URL,
  hasEnvKey: !!SUPABASE_PUBLISHABLE_KEY,
  finalUrl: SUPABASE_URL?.substring(0, 30) + '...',
  finalKey: SUPABASE_PUBLISHABLE_KEY?.substring(0, 20) + '...',
  envVars: {
    VITE_SUPABASE_URL: SUPABASE_URL ? 'Set' : 'Missing',
    VITE_SUPABASE_PUBLISHABLE_KEY: SUPABASE_PUBLISHABLE_KEY ? 'Set' : 'Missing'
  },
  buildTime: import.meta.env.BUILD_TIME || 'Unknown',
  baseUrl: import.meta.env.BASE_URL || '/',
  currentUrl: typeof window !== 'undefined' ? window.location.href : 'Unknown'
});

// Check for malformed URL
if (SUPABASE_URL && !SUPABASE_URL.startsWith('https://')) {
  console.error('Invalid Supabase URL format:', SUPABASE_URL);
}

// Create a safe storage mechanism for production
const createSafeStorage = () => {
  try {
    // Check if localStorage is available
    if (typeof window !== 'undefined' && window.localStorage) {
      return localStorage;
    }
    // Fallback to memory storage for production
    console.warn('localStorage not available, using memory storage');
    return {
      getItem: (key: string) => null,
      setItem: (key: string, value: string) => {},
      removeItem: (key: string) => {},
      clear: () => {},
      length: 0,
      key: (index: number) => null
    };
  } catch (error) {
    console.warn('localStorage access failed, using memory storage:', error);
    return {
      getItem: (key: string) => null,
      setItem: (key: string, value: string) => {},
      removeItem: (key: string) => {},
      clear: () => {},
      length: 0,
      key: (index: number) => null
    };
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: createSafeStorage(),
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Add a helper function to check if Supabase is properly configured
export const isSupabaseConfigured = () => {
  return !!(SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY);
};

// Add a test function to verify Supabase connection
export const testSupabaseConnection = async () => {
  try {
    console.log('Testing Supabase connection...');
    const { data, error } = await supabase
      .from('clients')
      .select('count')
      .limit(1);
    
    console.log('Supabase connection test result:', { data, error });
    
    if (error) {
      console.error('Supabase connection failed:', error);
      return false;
    }
    
    console.log('Supabase connection successful');
    return true;
  } catch (error) {
    console.error('Supabase connection test error:', error);
    return false;
  }
};