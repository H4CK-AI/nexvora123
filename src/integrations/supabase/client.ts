// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Enhanced logging for debugging
console.log('Supabase Configuration Debug:', {
  mode: import.meta.env.MODE,
  dev: import.meta.env.DEV,
  prod: import.meta.env.PROD,
  hasEnvUrl: !!SUPABASE_URL,
  hasEnvKey: !!SUPABASE_PUBLISHABLE_KEY,
  finalUrl: SUPABASE_URL?.substring(0, 30) + '...',
  finalKey: SUPABASE_PUBLISHABLE_KEY?.substring(0, 20) + '...',
  envVars: {
    VITE_SUPABASE_URL: SUPABASE_URL ? 'Set' : 'Missing',
    VITE_SUPABASE_PUBLISHABLE_KEY: SUPABASE_PUBLISHABLE_KEY ? 'Set' : 'Missing'
  },
  buildTime: import.meta.env.BUILD_TIME || 'Unknown',
  baseUrl: import.meta.env.BASE_URL || '/',
  currentUrl: typeof window !== 'undefined' ? window.location.href : 'Unknown'
});

// Check for malformed URL
if (SUPABASE_URL && !SUPABASE_URL.startsWith('https://')) {
  console.error('Invalid Supabase URL format:', SUPABASE_URL);
}

// Create a safe storage mechanism for production
const createSafeStorage = () => {
  try {
    // Check if localStorage is available
    if (typeof window !== 'undefined' && window.localStorage) {
      return localStorage;
    }
    // Fallback to memory storage for production
    console.warn('localStorage not available, using memory storage');
    return {
      getItem: (key: string) => null,
      setItem: (key: string, value: string) => {},
      removeItem: (key: string) => {},
      clear: () => {},
      length: 0,
      key: (index: number) => null
    };
  } catch (error) {
    console.warn('localStorage access failed, using memory storage:', error);
    return {
      getItem: (key: string) => null,
      setItem: (key: string, value: string) => {},
      removeItem: (key: string) => {},
      clear: () => {},
      length: 0,
      key: (index: number) => null
    };
  }
};

// Create Supabase client with proper error handling
let supabase: any = null;

try {
  if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
    console.error('Supabase environment variables are missing!');
    console.error('VITE_SUPABASE_URL:', SUPABASE_URL ? 'Set' : 'Missing');
    console.error('VITE_SUPABASE_PUBLISHABLE_KEY:', SUPABASE_PUBLISHABLE_KEY ? 'Set' : 'Missing');
    
    // Create a mock client that won't crash the app
    console.warn('Creating mock Supabase client - app will work but no data will load');
    supabase = {
      from: (table: string) => ({
        select: (columns?: string) => Promise.resolve({ data: [], error: null }),
        insert: (data: any) => Promise.resolve({ data: null, error: new Error('Mock client - no data saved') }),
        update: (data: any) => Promise.resolve({ data: null, error: new Error('Mock client - no data updated') }),
        delete: () => Promise.resolve({ data: null, error: new Error('Mock client - no data deleted') }),
        eq: (column: string, value: any) => ({
          select: () => Promise.resolve({ data: [], error: null }),
          update: () => Promise.resolve({ data: null, error: new Error('Mock client') }),
          delete: () => Promise.resolve({ data: null, error: new Error('Mock client') }),
        }),
        order: (column: string, options?: any) => ({
          select: () => Promise.resolve({ data: [], error: null }),
          limit: (count: number) => Promise.resolve({ data: [], error: null }),
        }),
        limit: (count: number) => Promise.resolve({ data: [], error: null }),
      }),
      channel: (name: string) => ({
        on: (event: string, callback: any) => ({
          subscribe: () => ({ unsubscribe: () => {} }),
        }),
        subscribe: () => ({ unsubscribe: () => {} }),
      }),
    };
  } else {
    // Create real Supabase client
    supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: createSafeStorage(),
        persistSession: true,
        autoRefreshToken: true,
      }
    });
  }
} catch (error) {
  console.error('Failed to create Supabase client:', error);
  // Create a mock client as fallback
  supabase = {
    from: (table: string) => ({
      select: (columns?: string) => Promise.resolve({ data: [], error: new Error('Supabase not configured') }),
      insert: (data: any) => Promise.resolve({ data: null, error: new Error('Supabase not configured') }),
      update: (data: any) => Promise.resolve({ data: null, error: new Error('Supabase not configured') }),
      delete: () => Promise.resolve({ data: null, error: new Error('Supabase not configured') }),
      eq: (column: string, value: any) => ({
        select: () => Promise.resolve({ data: [], error: null }),
        update: () => Promise.resolve({ data: null, error: new Error('Supabase not configured') }),
        delete: () => Promise.resolve({ data: null, error: new Error('Supabase not configured') }),
      }),
      order: (column: string, options?: any) => ({
        select: () => Promise.resolve({ data: [], error: null }),
        limit: (count: number) => Promise.resolve({ data: [], error: null }),
      }),
      limit: (count: number) => Promise.resolve({ data: [], error: null }),
    }),
    channel: (name: string) => ({
      on: (event: string, callback: any) => ({
        subscribe: () => ({ unsubscribe: () => {} }),
      }),
      subscribe: () => ({ unsubscribe: () => {} }),
    }),
  };
}

export { supabase };

// Add a helper function to check if Supabase is properly configured
export const isSupabaseConfigured = () => {
  return !!(SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY);
};

// Add a test function to verify Supabase connection
export const testSupabaseConnection = async () => {
  try {
    console.log('Testing Supabase connection...');
    const { data, error } = await supabase
      .from('clients')
      .select('count')
      .limit(1);
    
    console.log('Supabase connection test result:', { data, error });
    
    if (error) {
      console.error('Supabase connection failed:', error);
      return false;
    }
    
    console.log('Supabase connection successful');
    return true;
  } catch (error) {
    console.error('Supabase connection test error:', error);
    return false;
  }
};