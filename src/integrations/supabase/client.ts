// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Fallback values for development only
const FALLBACK_URL = 'https://hyxwzeclqmanosdpkxae.supabase.co';
const FALLBACK_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh5eHd6ZWNscW1hbm9zZHBreGFlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQwMDQ2NTUsImV4cCI6MjA2OTU4MDY1NX0.Ij0r0wSyCXKjfmSzVut-ULRSzhAN499KWj1k1jhzCOg';

// Use environment variables if available, otherwise fallback
const finalUrl = SUPABASE_URL || FALLBACK_URL;
const finalKey = SUPABASE_PUBLISHABLE_KEY || FALLBACK_KEY;

// Enhanced logging for debugging
console.log('Supabase Configuration Debug:', {
  mode: import.meta.env.MODE,
  dev: import.meta.env.DEV,
  prod: import.meta.env.PROD,
  hasEnvUrl: !!SUPABASE_URL,
  hasEnvKey: !!SUPABASE_PUBLISHABLE_KEY,
  usingFallback: !SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY,
  finalUrl: finalUrl?.substring(0, 30) + '...',
  finalKey: finalKey?.substring(0, 20) + '...'
});

// Validate environment variables
if (!finalUrl || !finalKey) {
  console.error('Supabase environment variables are missing!');
  console.error('VITE_SUPABASE_URL:', SUPABASE_URL ? 'Set' : 'Missing');
  console.error('VITE_SUPABASE_PUBLISHABLE_KEY:', SUPABASE_PUBLISHABLE_KEY ? 'Set' : 'Missing');
  console.error('Using fallback values:', !SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY);
}

// Check for malformed URL
if (finalUrl && !finalUrl.startsWith('https://')) {
  console.error('Invalid Supabase URL format:', finalUrl);
}

// Create a safe storage mechanism for production
const createSafeStorage = () => {
  try {
    // Check if localStorage is available
    if (typeof window !== 'undefined' && window.localStorage) {
      return localStorage;
    }
    // Fallback to memory storage for production
    console.warn('localStorage not available, using memory storage');
    return {
      getItem: (key: string) => null,
      setItem: (key: string, value: string) => {},
      removeItem: (key: string) => {},
      clear: () => {},
      length: 0,
      key: (index: number) => null
    };
  } catch (error) {
    console.warn('localStorage access failed, using memory storage:', error);
    return {
      getItem: (key: string) => null,
      setItem: (key: string, value: string) => {},
      removeItem: (key: string) => {},
      clear: () => {},
      length: 0,
      key: (index: number) => null
    };
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(finalUrl!, finalKey!, {
  auth: {
    storage: createSafeStorage(),
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Add a helper function to check if Supabase is properly configured
export const isSupabaseConfigured = () => {
  return !!(finalUrl && finalKey);
};